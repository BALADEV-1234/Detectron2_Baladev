# -*- coding: utf-8 -*-
"""

Automatically generated by Colaboratory.


"""


# Some basic setup
# Setup detectron2 logger
import detectron2
import argparse
from detectron2.utils.logger import setup_logger
setup_logger()

# import some common libraries
import numpy as np
mport os, json, cv2, random


# import some common detectron2 utilities
from detectron2.engine import DefaultPredictor
from detectron2 import model_zoo
from detectron2.config import get_cfg
from detectron2.data import MetadataCatalog, DatasetCatalog

parser = argparse.ArgumentParser()
parser.add_argument('--nw', type=int,default=2,help='NUM_WORKERS')
parser.add_argument('--ib', type=int,default=2,help='IMS_PER_BATCH')
parser.add_argument('--lr', type=int,default=0.00025,help='learning_rate')
parser.add_argument('--iter', type=int,default=1000,help='Max_Iter')
parser.add_argument('--batch', type=int,default=128,help='BATCH_SIZE_PER_IMAG')
parser.add_argument('--nc', type=int,default=1,help='NUM_CLASSES')
parser.add_argument('--jp',type=str,default=os.path.join(os.getcwd(),'output.json'),help='coco_format_annotation_file')
parser.add_argument('--train',type=str,default=os.path.join(os.getcwd(),'train'),help='training image path')
parser.add_argument('--test',type=str,default=os.path.join(os.getcwd(),'test'),help='test image path')
parser.add_argument('--modpath',type=str,default=os.path.join(os.getcwd(),'detectron2'),help='test image path')
args = parser.parse_args()

import sys
sys.path.append(args.modpath)

from detectron2.data.datasets import register_coco_instances
register_coco_instances('compititions', {}, args.jp, args.train)



sample_metadata = MetadataCatalog.get("compititions")
dataset_dicts = DatasetCatalog.get("compititions")

from detectron2.engine import DefaultTrainer
from detectron2.config import get_cfg
import os

cfg = get_cfg()
cfg.merge_from_file(os.path.join(args.modpath,"/configs/COCO-Detection/faster_rcnn_R_101_FPN_3x.yaml"))
cfg.DATASETS.TRAIN = ("compititions",)
cfg.DATASETS.TEST = ()   
cfg.DATALOADER.NUM_WORKERS = args.nw
cfg.MODEL.WEIGHTS = "detectron2://COCO-Detection/faster_rcnn_R_101_FPN_3x/137851257/model_final_f6e8b1.pkl"  
cfg.SOLVER.IMS_PER_BATCH = args.ib
cfg.SOLVER.BASE_LR = args.lr
cfg.SOLVER.MAX_ITER = args.iter
cfg.MODEL.ROI_HEADS.BATCH_SIZE_PER_IMAGE = args.batch  
cfg.MODEL.ROI_HEADS.NUM_CLASSES = args.nc

os.makedirs(cfg.OUTPUT_DIR, exist_ok=True)
trainer = DefaultTrainer(cfg)
trainer.resume_or_load(resume=True)
trainer.train()

cfg.MODEL.WEIGHTS = os.path.join(cfg.OUTPUT_DIR, "model_final.pth")
cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5
#cfg.DATASETS.TEST = ("compititions",)
predictor = DefaultPredictor(cfg)



ImageID=[]
Conf=[]
bound=[]
import glob
for i in glob.glob(os.path.join(args.test,"*.jpg")):
  pred=predictor(cv2.imread(i))
  for  j in range(len(pred["instances"].pred_classes.tolist())):
    ImageID.append(i.split('/')[-1])
    Conf.append(pred["instances"].scores.tolist()[j])
    bound.append([ k.tolist() for k in pred["instances"].pred_boxes][j])
import pandas as pd
output_df=pd.DataFrame({"ImageID":ImageID,"Conf":Conf,"bound":bound})
output_df['XMin']=output_df['bound'].apply(lambda x:x[0])
output_df['YMin']=output_df['bound'].apply(lambda x:x[1])
output_df['XMax']=output_df['bound'].apply(lambda x:x[2])
output_df['YMax']=output_df['bound'].apply(lambda x:x[3])
output_df['LabelName']='pothole'
output_df[['XMin','YMin','XMax','YMax','Conf','LabelName','ImageID']].to_csv(os.path.join(os.getcwd(),'submission_1.csv'),index=False)
